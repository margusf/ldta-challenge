MODULE Sample;
	PROCEDURE Foo(x, y: INTEGER);
		VAR z: INTEGER;
	BEGIN
		z := 1 + 2 + i + 4 + 5;
		barbaz
	END Foo;

    PROCEDURE Multiply;
        VAR x, y, z: INTEGER;
    BEGIN Read(x); Read(y); z := 0;
        WHILE x > 0 DO
            IF x MOD 2 = 1 THEN z := z + y END ;
            y := 2*y; x := x DIV 2
        END ;
        Write(x); Write(y); Write(z); WriteLn
    END Multiply;
    
    PROCEDURE Divide;
        VAR x, y, r, q, w: INTEGER;
    BEGIN Read(x); Read(y); r := x; q := 0; w := y;
        WHILE w <= r DO w := 2*w END ;
        WHILE w > y DO
            q := 2*q; w := w DIV 2;
            IF w <= r THEN r := r - w; q := q + 1 END
        END ;
        Write(x); Write(y); Write(q); Write(r); WriteLn
	END Divide;


	PROCEDURE typeErrors(x: INTEGER; y: BOOLEAN);
		TYPE
			intT = INTEGER;
			intT2 = intT;
		VAR
			i, j, k: intT2;
			a, b, c, d: BOOLEAN;
	BEGIN
		i := 1 + 2 + 3 + x + y;
		i := j + k
	END typeErrors;

	PROCEDURE withParams(x: INTEGER; y: BOOLEAN);
	END withParams;

	PROCEDURE useParams;
		CONST
			foo = 10;
			bar = 1 = 1;
	BEGIN
		withParams(10, 1 = 1);
		withParams(1 = 1, 2);
		withParams(foo, foo);
		Multiply(22);
		withParams(2);

		FOR foo := 10 TO bar DO
			foo := 10
		END;

		CASE 1 + foo OF
			1..2:
				WriteLn;
			2..3, 4..5:
				WriteLn;
				WriteLn;
				WriteLn;
			8:
				foo := 10;
				bar := 20;
			ELSE
				Write(foo);
		END
	END useParams;
END Sample.
